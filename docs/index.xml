<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Léo Lima on Léo Lima</title>
    <link>https://tsleolima.github.io/visuInformacaoLab1/</link>
    <description>Recent content in Léo Lima on Léo Lima</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017 Leonardo Lima</copyright>
    <lastBuildDate>Wed, 20 Apr 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="/visuInformacaoLab1/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Visualização de Dados com Interação</title>
      <link>https://tsleolima.github.io/visuInformacaoLab1/post/visuinteracao/</link>
      <pubDate>Fri, 22 Dec 2017 17:21:06 -0300</pubDate>
      
      <guid>https://tsleolima.github.io/visuInformacaoLab1/post/visuinteracao/</guid>
      <description>&lt;script src=&#34;https://d3js.org/d3.v4.min.js&#34;&gt;&lt;/script&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css&#34;&gt;
&lt;div class=&#34;container&#34;&gt;
&lt;div class=&#34;row&#34;&gt;
&lt;div class=&#34;col-md-8&#34;&gt;
&lt;h2&gt;Uma visualização sobre o Bobs com interação&lt;/h2&gt;

&lt;div class=&#34;col-md-12&#34;&gt;&lt;p&gt;Como foi abordado no outro post sobre a visualização do bobs, com os dados obtidos do em torno do açude velho em Campina Grande, Paraiba, vemos aqui uma nova visualização, olhando bem aparenta ser a mesma utilizada anteriormente, mas esta possui algumas interações com o usuario, na qual tem uma finalidade de se extrair o dado com mais facilidade, ou flexibilidade.&lt;/p&gt;

&lt;p&gt;Vamos para o gráfico, nessa nova versão do line chart, temos alguns botões e eventos com hover, ou seja, ao passarmos o mouse por cima das bolinhas que estão presentes na linha, vemos com detalhes a média dos pedestres que passavam no local naquele horario, mas, porque fazer isso, já que possuimos o eixo Y para nos retornar esse resultado ? Bem, a explicação é simples, dessa maneira vemos com precisão a média e com mais facilidade, obviamente poderiamos colocar mais informações usando essa ferramenta (hover) tão importante, mas eu tive apenas essa no momento :(&lt;/p&gt;

&lt;p&gt;Explicado como funcionam as bolinhas na nossa linha, vamos para os lindos botões azuis, neles podemos trocar os dados, ou mesmo, visualizar a nova linha para um novo local, também proximo do açudo velho, para ver em qual local, por exemplo,o tráfego de pessoas é maior naquele horario, enfim, existem n observações que podem ser feitas a partir desses dados, inclusive, retomando a ideia do marketing receber esses dados e aplicar em novas táticas de merchandising naquele horario é uma boa ideia!.&lt;/p&gt;
&lt;h3&gt;&lt;p&gt;Espero que gostem!!!&lt;/p&gt;&lt;/h3&gt;  &lt;/div&gt;

&lt;div class=&#34;row mychart&#34; id=&#34;chart&#34;&gt;&lt;/div&gt;


&lt;div id=&#34;controls&#34;&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&#34;tooltip&#34; class=&#34;hidden&#34;&gt;
  &lt;p id=&#34;titulo_tooltip&#34;&gt; &lt;/p&gt;
  &lt;p&gt; &lt;b id=&#34;value&#34;&gt;0&lt;/b&gt; &lt;/p&gt;
&lt;/div&gt;

&lt;style type=&#34;text/css&#34;&gt;

  .line {
    fill: none;
    stroke: #ffba49;
    stroke-width: 3;
  }

  input{
    margin-left: 60px;
  }

  .dot {
    fill: #20a39e;
    stroke: #fff;
  }

  rect {
    fill: steelblue;
  }

  rect:hover {
    fill: red;
  }

  text {
    font: 12px sans-serif;
    text-anchor: left;
  }

  .row p{
    padding: 10px;
  }

  #tooltip {
    position: absolute;
    width: auto;
    height: auto;
    padding: 10px;
    background-color: #23001e;
    border-radius: 10px;
    box-shadow:5px 10px 18px #888888;
}

  #controls {
    position: absolute;
    width: auto;
    height: auto;
}

  #tooltip.hidden {
    display: none;
}

  #tooltip p {
    margin: 0;
    font-family: sans-serif;
    font-size: 12px;
    line-height: 20px;
    color: #fff;
    text-align: center;
}

&lt;/style&gt;

&lt;script type=&#34;text/javascript&#34;&gt;
&#34;user strict&#34;

function desenhaVisualizacaoLinha(dados){

  var horariosBobs = dados.filter((dado) =&gt; dado.local === &#34;bobs&#34;);

  var margin = {top: 50, right: 50, bottom: 50, left: 50}
  , width = 1000 - margin.left - margin.right
  , height = 500 - margin.top - margin.bottom;

  mediaBobs = fazMedia(horariosBobs);

  var xScale = d3.scaleBand()
  .domain(mediaBobs.map((dado,indice) =&gt; dado.horas))
  .range([0, width])
  .padding([1]);

  var yScale = d3.scaleLinear()
  .domain([0, 320])
  .rangeRound([height, 0]);

  var line = d3.line()
  .x(function(d, i) { return xScale(d.horas); })
  .y(function(d) { return yScale(d.media); })
  .curve(d3.curveMonotoneX);

  var svg = d3.select(&#34;#chart&#34;).append(&#34;svg&#34;)
  .attr(&#34;width&#34;, width + margin.left + margin.right)
  .attr(&#34;height&#34;, height + margin.top + margin.bottom)
  .append(&#34;g&#34;)
  .attr(&#34;transform&#34;, &#34;translate(&#34; + margin.left + &#34;,&#34; + margin.top + &#34;)&#34;);

  svg.append(&#34;g&#34;)
  .attr(&#34;class&#34;, &#34;x axis&#34;)
  .attr(&#34;transform&#34;, &#34;translate(0,&#34; + height + &#34;)&#34;)
  .call(d3.axisBottom(xScale))

  svg.append(&#34;g&#34;)
  .attr(&#34;class&#34;, &#34;y axis&#34;)
  .call(d3.axisLeft(yScale));

  svg.append(&#34;path&#34;)
  .datum(mediaBobs)
  .attr(&#34;class&#34;, &#34;line&#34;)
  .attr(&#34;d&#34;, line);


  svg.selectAll(&#34;.dot&#34;)
  .data(mediaBobs)
  .enter().append(&#34;circle&#34;) // Uses the enter().append() method
  .attr(&#34;class&#34;, &#34;dot&#34;) // Assign a class for styling
  .attr(&#34;cx&#34;, function(d, i) { return xScale(d.horas) })
  .attr(&#34;cy&#34;, function(d) { return yScale(d.media) })
  .attr(&#34;r&#34;, 5);

  svg.selectAll(&#34;.dot&#34;).on(&#34;mouseover&#34;, mouseDentro);
  function mouseDentro(d){

    d3.select(&#34;#tooltip&#34;) // reparou que tem uma div escondida no html?
    .style(&#34;left&#34;, (d3.event.pageX + 50) + &#34;px&#34;)
    .style(&#34;top&#34;, (d3.event.pageY - 60) + &#34;px&#34;)
    .select(&#34;#value&#34;)
    .text(d.media);
    d3.select(&#34;#tooltip #titulo_tooltip&#34;)
    .text(&#34;Média de pedestres&#34;)
    // Mostra o tooltip
    d3.select(&#34;#tooltip&#34;).classed(&#34;hidden&#34;, false);
  }

  svg.selectAll(&#34;.dot&#34;).on(&#34;mouseout&#34;, mouseSaiu);
  function mouseSaiu(d){
    // não precisamos mais de tooltip
    d3.select(&#34;#tooltip&#34;).classed(&#34;hidden&#34;, true);
  }

  // Os Botões

  d3.select(&#34;#controls&#34;)
  .append(&#34;input&#34;)
  .attr(&#34;type&#34;,&#34;button&#34;)
  .attr(&#34;value&#34;,&#34;Média Bobs&#34;)
  .attr(&#34;class&#34;, &#34;btn btn-primary&#34;)
  .on(&#34;click&#34;, mudaHorarioBobs)

  d3.select(&#34;#controls&#34;)
  .append(&#34;input&#34;)
  .attr(&#34;type&#34;,&#34;button&#34;)
  .attr(&#34;value&#34;,&#34;Média Jackson&#34;)
  .attr(&#34;class&#34;, &#34;btn btn-primary&#34;)
  .on(&#34;click&#34;, mudaHorarioJackson)

  d3.select(&#34;#controls&#34;)
  .append(&#34;input&#34;)
  .attr(&#34;type&#34;,&#34;button&#34;)
  .attr(&#34;value&#34;,&#34;Média Burrinhos&#34;)
  .attr(&#34;class&#34;, &#34;btn btn-primary&#34;)
  .on(&#34;click&#34;, mudaHorarioBurrinhos)


  function mudaHorarioBobs(){
    var horariosBobs = dados.filter((dado) =&gt; dado.local === &#34;bobs&#34;);
    var mediaBobs = fazMedia(horariosBobs);

    svg.select(&#34;.line&#34;)
    .datum(mediaBobs)
    .attr(&#34;class&#34;, &#34;line&#34;)
    .attr(&#34;d&#34;, line)

    svg.selectAll(&#34;circle&#34;).remove()

    svg.selectAll(&#34;circle&#34;)
    .data(mediaBobs)
    .enter().append(&#34;circle&#34;) // Uses the enter().append() method
    .attr(&#34;class&#34;, &#34;dot&#34;) // Assign a class for styling
    .attr(&#34;cx&#34;, function(d, i) { return xScale(d.horas) })
    .attr(&#34;cy&#34;, function(d) { return yScale(d.media) })
    .attr(&#34;r&#34;, 5);

    svg.selectAll(&#34;.dot&#34;).on(&#34;mouseover&#34;, mouseDentro);
    function mouseDentro(d){

      d3.select(&#34;#tooltip&#34;) // reparou que tem uma div escondida no html?
      .style(&#34;left&#34;, (d3.event.pageX + 50) + &#34;px&#34;)
      .style(&#34;top&#34;, (d3.event.pageY - 60) + &#34;px&#34;)
      .select(&#34;#value&#34;)
      .text(d.media);
      d3.select(&#34;#tooltip #titulo_tooltip&#34;)
      .text(&#34;Média de pedestres&#34;)
      // Mostra o tooltip
      d3.select(&#34;#tooltip&#34;).classed(&#34;hidden&#34;, false);
    }

    svg.selectAll(&#34;.dot&#34;).on(&#34;mouseout&#34;, mouseSaiu);
    function mouseSaiu(d){
      // não precisamos mais de tooltip
      d3.select(&#34;#tooltip&#34;).classed(&#34;hidden&#34;, true);
    }

  }

  function mudaHorarioJackson(){
    var horariosJackson = dados.filter((dado) =&gt; dado.local === &#34;jackson&#34;);
    var mediaJackson = fazMedia(horariosJackson);

    svg.select(&#34;.line&#34;)
    .datum(mediaJackson)
    .attr(&#34;class&#34;, &#34;line&#34;)
    .attr(&#34;d&#34;, line)

    svg.selectAll(&#34;circle&#34;).remove()

    svg.selectAll(&#34;circle&#34;)
    .data(mediaJackson)
    .enter().append(&#34;circle&#34;) // Uses the enter().append() method
    .attr(&#34;class&#34;, &#34;dot&#34;) // Assign a class for styling
    .attr(&#34;cx&#34;, function(d, i) { return xScale(d.horas) })
    .attr(&#34;cy&#34;, function(d) { return yScale(d.media) })
    .attr(&#34;r&#34;, 5);

    svg.selectAll(&#34;.dot&#34;).on(&#34;mouseover&#34;, mouseDentro);
    function mouseDentro(d){

      d3.select(&#34;#tooltip&#34;) // reparou que tem uma div escondida no html?
      .style(&#34;left&#34;, (d3.event.pageX + 50) + &#34;px&#34;)
      .style(&#34;top&#34;, (d3.event.pageY - 60) + &#34;px&#34;)
      .select(&#34;#value&#34;)
      .text(d.media);
      d3.select(&#34;#tooltip #titulo_tooltip&#34;)
      .text(&#34;Média de pedestres&#34;)
      // Mostra o tooltip
      d3.select(&#34;#tooltip&#34;).classed(&#34;hidden&#34;, false);
    }

    svg.selectAll(&#34;.dot&#34;).on(&#34;mouseout&#34;, mouseSaiu);
    function mouseSaiu(d){
      // não precisamos mais de tooltip
      d3.select(&#34;#tooltip&#34;).classed(&#34;hidden&#34;, true);
    }

  }

  function mudaHorarioBurrinhos(){
    var horariosBurrinhos = dados.filter((dado) =&gt; dado.local === &#34;burrinhos&#34;);
    var mediaBurrinhos = fazMedia(horariosBurrinhos);

    svg.select(&#34;.line&#34;)
    .datum(mediaBurrinhos)
    .attr(&#34;class&#34;, &#34;line&#34;)
    .attr(&#34;d&#34;, line)

    svg.selectAll(&#34;circle&#34;).remove()

    svg.selectAll(&#34;circle&#34;)
    .data(mediaBurrinhos)
    .enter().append(&#34;circle&#34;) // Uses the enter().append() method
    .attr(&#34;class&#34;, &#34;dot&#34;) // Assign a class for styling
    .attr(&#34;cx&#34;, function(d, i) { return xScale(d.horas) })
    .attr(&#34;cy&#34;, function(d) { return yScale(d.media) })
    .attr(&#34;r&#34;, 5);

    svg.selectAll(&#34;.dot&#34;).on(&#34;mouseover&#34;, mouseDentro);
    function mouseDentro(d){

      d3.select(&#34;#tooltip&#34;) // reparou que tem uma div escondida no html?
      .style(&#34;left&#34;, (d3.event.pageX + 50) + &#34;px&#34;)
      .style(&#34;top&#34;, (d3.event.pageY - 60) + &#34;px&#34;)
      .select(&#34;#value&#34;)
      .text(d.media);
      d3.select(&#34;#tooltip #titulo_tooltip&#34;)
      .text(&#34;Média de pedestres&#34;)
      // Mostra o tooltip
      d3.select(&#34;#tooltip&#34;).classed(&#34;hidden&#34;, false);
    }

    svg.selectAll(&#34;.dot&#34;).on(&#34;mouseout&#34;, mouseSaiu);
    function mouseSaiu(d){
      // não precisamos mais de tooltip
      d3.select(&#34;#tooltip&#34;).classed(&#34;hidden&#34;, true);
    }

  }

}
d3.csv(&#34;https://raw.githubusercontent.com/luizaugustomm/pessoas-no-acude/master/dados/processados/dados.csv&#34;,function(dados){
  desenhaVisualizacaoLinha(dados);
  });

  function fazMedia(dados){

    var horas = [&#34;6:00&#34;,&#34;7:00&#34;,&#34;8:00&#34;,&#34;9:00&#34;,&#34;10:00&#34;,&#34;11:00&#34;,&#34;12:00&#34;,&#34;13:00&#34;,&#34;14:00&#34;,&#34;15:00&#34;,&#34;16:00&#34;,&#34;17:00&#34;,&#34;18:00&#34;,&#34;19:00&#34;,&#34;20:00&#34;];
    var cont = 0;
    var soma = 0;
    var indice = 0;
    var mediaHoras = [];
    for (var i = 0; i &lt; dados.length; i++) {
      if(cont == 4){
        var media = soma / cont;
        var objeto = {&#39;horas&#39;:horas[indice],media:media};
        mediaHoras[indice] = objeto;
        cont = 0;
        soma = 0;
        indice ++;
      }
      soma += parseInt(dados[i].total_pedestres);
      cont ++;
    }
    return mediaHoras;
  }

  &lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>Visualização de dados sobre o Bobs</title>
      <link>https://tsleolima.github.io/visuInformacaoLab1/post/lab-4/</link>
      <pubDate>Sun, 10 Dec 2017 16:55:39 -0300</pubDate>
      
      <guid>https://tsleolima.github.io/visuInformacaoLab1/post/lab-4/</guid>
      <description>&lt;script src=&#34;https://d3js.org/d3.v4.min.js&#34;&gt;&lt;/script&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css&#34;&gt;
&lt;div class=&#34;container&#34;&gt;
&lt;div class=&#34;row&#34;&gt;
&lt;h2&gt;Uma visualização sobre o Bobs&lt;/h2&gt;
&lt;p&gt;Dessa vez, estou trazendo um visualização um pouco diferente das convencionais (Barras),a ideia é usar um gráfico linear,&lt;br&gt; ou também conhecido como line chart, para representar a grande quantidade de dados massivos, obtidos no entorno do açude velho,&lt;br&gt; situado em Campina Grande,Paraiba, afim de mostrar ao utilizadores dos serviços do Bobs, ou até mesmo do sistema de marketing da empresa,&lt;br&gt; os picos de horarios em que o local é mais frequentado.&lt;/p&gt;

&lt;p&gt;No gráfico a seguir, foram utilizados o número de pedestres que passavam perto do Bobs, e então é feita um mapeamento do horario para a quantidade &lt;br&gt; de pessoas naquele horario.&lt;/p&gt;

&lt;div class=&#34;row mychart&#34; id=&#34;chart&#34;&gt;&lt;/div&gt;

&lt;p&gt;Podemos observar que o horario em que mais pessoas trafegam proximo ao Bobs é entorno de 17:00 e 19:30, caso essa pesquisa chegue &lt;br&gt; ao ouvidos do marketing do Bobs, pode ser feita alguma estrategia para atrair todas essa pessoas para o local, ou ate mesmo investir em horarios&lt;br&gt; ou refeições em que existe um pessoal relativamente menor que o mencionado, enfim, cabe ao marketing resolver.

&lt;p&gt;Nessa próxima visualização, temos um gráfico em barras nele vemos outro modo de visualizar os mesmos dados, mas dessa vez&lt;br&gt; temos a média dos pedestres em cada hora, sendo assim, existe uma facilidade em ver qual hora possui uma média maior.

&lt;div class=&#34;row mychart&#34; id=&#34;chart2&#34;&gt;&lt;/div&gt;

&lt;p&gt;Aqui, retornamos com o mesmo gráfico de linhas, mas dessa vez um pouco mais refinado, e se puderem observar atentamente,vemos &lt;br&gt; que as linhas também estão sendo moduladas atraves de médias de cada horario, ou seja, podemos generalizar qual horario realmente é mais &lt;br&gt; movimentado, ao contrario do anterior que seria apenas no intervalo de tempo de 15 em 15 minutos.

&lt;div class=&#34;row mychart&#34; id=&#34;chart3&#34;&gt;&lt;/div&gt;

&lt;script type=&#34;text/javascript&#34;&gt;
&#34;user strict&#34;

function desenhaVisualizacaoLinha(dados){

  var horariosBobs = dados.filter((dado) =&gt; dado.local === &#34;bobs&#34;);

  var margin = {top: 50, right: 50, bottom: 50, left: 50}
  , width = 1000 - margin.left - margin.right
  , height = 500 - margin.top - margin.bottom;

  mediaBobs = fazMedia(horariosBobs);

  var xScale = d3.scaleBand()
  .domain(mediaBobs.map((dado,indice) =&gt; dado.horas))
  .range([0, width])
  .padding([1]);

  var yScale = d3.scaleLinear()
  .domain([0, 320])
  .rangeRound([height, 0]);

  var line = d3.line()
  .x(function(d, i) { return xScale(d.horas); })
  .y(function(d) { return yScale(d.media); })
  .curve(d3.curveMonotoneX);

  var svg = d3.select(&#34;#chart3&#34;).append(&#34;svg&#34;)
  .attr(&#34;width&#34;, width + margin.left + margin.right)
  .attr(&#34;height&#34;, height + margin.top + margin.bottom)
  .append(&#34;g&#34;)
  .attr(&#34;transform&#34;, &#34;translate(&#34; + margin.left + &#34;,&#34; + margin.top + &#34;)&#34;);

  svg.append(&#34;g&#34;)
  .attr(&#34;class&#34;, &#34;x axis&#34;)
  .attr(&#34;transform&#34;, &#34;translate(0,&#34; + height + &#34;)&#34;)
  .call(d3.axisBottom(xScale))

  svg.append(&#34;g&#34;)
  .attr(&#34;class&#34;, &#34;y axis&#34;)
  .call(d3.axisLeft(yScale));

  svg.append(&#34;path&#34;)
  .datum(mediaBobs)
  .attr(&#34;class&#34;, &#34;line&#34;)
  .attr(&#34;d&#34;, line);

}

function desenhaVisualizacaoBarras(dados){

  var horariosBobs = dados.filter((dado) =&gt; dado.local === &#34;bobs&#34;);

  var mediaBobs = fazMedia(horariosBobs);

  var alturaSVG = 550, larguraSVG = 900;
  var   margin = {top: 10, right: 20, bottom:30, left: 45},
  larguraVis = larguraSVG - margin.left - margin.right,
  alturaVis = alturaSVG - margin.top - margin.bottom;

  var grafico = d3.select(&#39;#chart2&#39;)
  .append(&#39;svg&#39;)
  .attr(&#39;width&#39;, larguraVis + margin.left + margin.right)
  .attr(&#39;height&#39;, alturaVis + margin.top + margin.bottom)
  .append(&#39;g&#39;)
  .attr(&#39;transform&#39;, &#39;translate(&#39; +  margin.left + &#39;,&#39; + margin.top + &#39;)&#39;);


  var x = d3.scaleBand()
  .domain(mediaBobs.map((dado, indice) =&gt; dado.horas))
  .range([0,larguraVis])
  .padding([0.5]);

  var y = d3.scaleLinear()
  .domain([0,250])
  .range([alturaVis,0]);

  grafico.selectAll(&#39;g&#39;)
  .data(mediaBobs)
  .enter()
  .append(&#39;rect&#39;)
  .attr(&#39;x&#39;, d =&gt; x(d.horas))
  .attr(&#39;y&#39;, d =&gt; y(d.media))
  .attr(&#39;width&#39;, x.bandwidth())
  .attr(&#39;height&#39;, (d) =&gt; alturaVis - y(d.media));


  grafico.append(&#34;g&#34;)
  .attr(&#34;class&#34;, &#34;x axis&#34;)
  .attr(&#34;transform&#34;, &#34;translate(0,&#34; + alturaVis + &#34;)&#34;)
  .call(d3.axisBottom(x));

  grafico.append(&#39;g&#39;)
  .attr(&#39;transform&#39;, &#39;translate(0,0)&#39;)
  .call(d3.axisLeft(y))

  grafico.append(&#34;text&#34;)
  .attr(&#34;transform&#34;, &#34;translate(10,&#34; + (alturaVis + margin.top)/4 + &#34;) rotate(0)&#34;)
  .text(&#34;Média de pedestres&#34;);
}

function desenhaVisualizacao(dados){

var larguraSVG = 800,
alturaSVG = 500;

var horariosBobs = dados.filter((dado) =&gt; dado.local === &#34;bobs&#34;);
console.log(horariosBobs);

var margin = {top: 50, right: 50, bottom: 50, left: 50}
, width = larguraSVG - margin.left - margin.right
, height = alturaSVG - margin.top - margin.bottom;

var n = 59;
var horas = [&#34;6:00&#34;,&#34;7:00&#34;,&#34;8:00&#34;,&#34;9:00&#34;,&#34;10:00&#34;,&#34;11:00&#34;,&#34;12:00&#34;,&#34;13:00&#34;,&#34;14:00&#34;,&#34;15:00&#34;,&#34;16:00&#34;,&#34;17:00&#34;,&#34;18:00&#34;,&#34;19:00&#34;,&#34;20:00&#34;];

var xScale = d3.scaleLinear()
.domain([0, n])
.range([0, width]);

var x = d3.scaleBand()
.domain(horas)
.range([0, width]);

var yScale = d3.scaleLinear()
.domain([0, 320])
.range([height, 0]);

var line = d3.line()
.x(function(d, i) { return xScale(i); })
.y(function(d) { return yScale(d.total_pedestres); })
.curve(d3.curveMonotoneX);

var svg = d3.select(&#34;#chart&#34;).append(&#34;svg&#34;)
.attr(&#34;width&#34;, width + margin.left + margin.right)
.attr(&#34;height&#34;, height + margin.top + margin.bottom)
.append(&#34;g&#34;)
.attr(&#34;transform&#34;, &#34;translate(&#34; + margin.left + &#34;,&#34; + margin.top + &#34;)&#34;);

svg.append(&#34;g&#34;)
.attr(&#34;class&#34;, &#34;x axis&#34;)
.attr(&#34;transform&#34;, &#34;translate(-22,&#34; + height + &#34;)&#34;)
.call(d3.axisBottom(x))
.select(&#34;.domain&#34;)
.remove();

svg.append(&#34;g&#34;)
.attr(&#34;class&#34;, &#34;y axis&#34;)
.call(d3.axisLeft(yScale));

svg.append(&#34;path&#34;)
.datum(horariosBobs)
.attr(&#34;class&#34;, &#34;line&#34;)
.attr(&#34;d&#34;, line);

svg.append(&#34;text&#34;)
.attr(&#34;transform&#34;, &#34;translate(20,&#34; + (height/100) + &#34;) rotate(0)&#34;)
.text(&#34;Número de pedestres&#34;);

}

d3.csv(&#34;https://raw.githubusercontent.com/luizaugustomm/pessoas-no-acude/master/dados/processados/dados.csv&#34;,function(dados){
  desenhaVisualizacaoBarras(dados);
  desenhaVisualizacaoLinha(dados);
  desenhaVisualizacao(dados);
});

function fazMedia(dados){

  var horas = [&#34;6:00&#34;,&#34;7:00&#34;,&#34;8:00&#34;,&#34;9:00&#34;,&#34;10:00&#34;,&#34;11:00&#34;,&#34;12:00&#34;,&#34;13:00&#34;,&#34;14:00&#34;,&#34;15:00&#34;,&#34;16:00&#34;,&#34;17:00&#34;,&#34;18:00&#34;,&#34;19:00&#34;,&#34;20:00&#34;];
  var cont = 0;
  var soma = 0;
  var indice = 0;
  var mediaHoras = [];
  for (var i = 0; i &lt; dados.length; i++) {
    if(cont == 4){
      var media = soma / cont;
      var objeto = {&#39;horas&#39;:horas[indice],media:media};
      mediaHoras[indice] = objeto;
      cont = 0;
      soma = 0;
      indice ++;
    }
    soma += parseInt(dados[i].total_pedestres);
    cont ++;
  }
  return mediaHoras;
}

&lt;/script&gt;

&lt;style type=&#34;text/css&#34;&gt;
.line {
  fill: none;
  stroke: #ffab00;
  stroke-width: 3;
}

.dot {
  fill: #ffab00;
  stroke: #fff;
}

rect {
  fill: steelblue;
}

rect:hover {
  fill: red;
}

text {
  font: 12px sans-serif;
  text-anchor: left;
}

.row p{
  padding: 10px;
}

&lt;/style&gt;
</description>
    </item>
    
    <item>
      <title>Visualização usando D3</title>
      <link>https://tsleolima.github.io/visuInformacaoLab1/post/viz-d3/</link>
      <pubDate>Wed, 29 Nov 2017 14:40:02 -0300</pubDate>
      
      <guid>https://tsleolima.github.io/visuInformacaoLab1/post/viz-d3/</guid>
      <description>&lt;script src=&#34;https://d3js.org/d3.v4.min.js&#34;&gt;&lt;/script&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css&#34;&gt;
&lt;div class=&#34;container&#34;&gt;
  &lt;div class=&#34;row&#34;&gt;
    &lt;h2&gt;Visualização usando D3&lt;/h2&gt;
    &lt;p&gt;Aplicando elementos visuais para criação de uma visualização apartir dos dados do açude Epitácio Pessoa&lt;/p&gt;
  &lt;/div&gt;
  &lt;div class=&#34;row mychart&#34; id=&#34;chart&#34;&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;style&gt;
  .mychart rect {
    fill: steelblue;
  }

  .mychart rect:hover {
    fill: red;
  }

  .mychart text {
    font: 12px sans-serif;
    text-anchor: left;
  }
&lt;/style&gt;

&lt;script type=&#34;text/javascript&#34;&gt;
  &#34;use strict&#34;

  function desenhaBarras(dados) {

    var larguraSVG = 700,
        alturaSVG = 200;

    var margin = {top: 50, right: 0, bottom: 50, left: 0}, // para descolar a vis das bordas do grafico
            larguraVis = larguraSVG - margin.left - margin.right,
            alturaVis = alturaSVG - margin.top - margin.bottom;

    var x = d3.scaleBand()
            .domain(dados.map((dado) =&gt; dado.mes))
            .range([0,larguraVis])
            .padding([1]);

    var grafico = d3.select(&#39;#chart&#39;)
      .append(&#39;svg&#39;)
        .attr(&#39;width&#39;,larguraSVG)
        .attr(&#39;height&#39;,alturaSVG)
        .append(&#39;g&#39;)
          .attr(&#39;transform&#39;, &#39;translate(&#39; + margin.left + &#39;,&#39; + margin.top + &#39;)&#39;);

    &lt;!-- O circulo amarelo indica os dados em noventa_percentil --&gt;

    grafico.selectAll(&#39;g&#39;)
      .data(dados)
      .enter()
        .append(&#39;circle&#39;)
          .attr(&#39;cx&#39;,dado =&gt; x(dado.mes))
          .attr(&#39;cy&#39;,50)
          .attr(&#39;r&#39;,dado =&gt; dado.noventa_percentil/4)
          .attr(&#34;fill&#34;,&#39;yellow&#39;);

    &lt;!-- O circulo em azul indica os dados em dez_percentil --&gt;

    grafico.selectAll(&#39;g&#39;)
      .data(dados)
      .enter()
        .append(&#39;circle&#39;)
          .attr(&#39;cx&#39;,dado =&gt; x(dado.mes))
          .attr(&#39;cy&#39;,50)
          .attr(&#39;r&#39;, dado =&gt; dado.dez_percentil/4)
          .attr(&#34;fill&#34;,&#39;blue&#39;);

    grafico.append(&#34;g&#34;)
      .attr(&#34;class&#34;, &#34;x axis&#34;)
      .attr(&#34;transform&#34;, &#34;translate(0,&#34; + alturaVis + &#34;)&#34;)
      .call(d3.axisBottom(x)); // magica do d3: gera eixo a partir da escala

  }

  d3.csv(&#39;https://raw.githubusercontent.com/tsleolima/intro-d3/master/dados/boqueirao-por-mes.csv&#39;, function(dados) {
    desenhaBarras(dados);
  });

&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>Minhas primeiras visualizações</title>
      <link>https://tsleolima.github.io/visuInformacaoLab1/post/visualizacoesboqueirao/</link>
      <pubDate>Wed, 20 Apr 2016 00:00:00 -0300</pubDate>
      
      <guid>https://tsleolima.github.io/visuInformacaoLab1/post/visualizacoesboqueirao/</guid>
      <description>

&lt;h1 id=&#34;como-tudo-começou&#34;&gt;Como tudo começou&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Primeiro de tudo, eu sou péssimo com ideias de visualizações de Dados ( isso foi para ser engraçado).&lt;/li&gt;
&lt;li&gt;Esse é um laboratorio para universidade e quem sabe alguem aproveite esses dados em um futuro.&lt;/li&gt;
&lt;li&gt;Minha missão é passar para vocês algumas situações que enfrentamos no decorrer dos anos com o açude Epitácio Pessoa.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#como-tudo-começou&#34;&gt;Como tudo começou&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#historia-sobre-o-açude-epitácio-pessoa&#34;&gt;Historia sobre o açude Epitácio Pessoa.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#bom-vamos-ao-que-interessa&#34;&gt;Bom vamos ao que interessa ?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/nav&gt;


&lt;h2 id=&#34;historia-sobre-o-açude-epitácio-pessoa&#34;&gt;Historia sobre o açude Epitácio Pessoa.&lt;/h2&gt;

&lt;p&gt;O Açude Epitácio Pessoa, popularmente conhecido como Boqueirão, é uma represa localizada no município de Boqueirão, estado brasileiro da Paraíba. Sua bacia se estende pelos municípios de Boqueirão, Cabaceiras e São Miguel de Taipu e abastece as cidades paraibanas de Campina Grande, Boqueirão, Queimadas, Pocinhos, Caturité, Riacho de Santo Antônio e Barra de São Miguel.&lt;/p&gt;

&lt;p&gt;O açude, que está situado na sub-bacia hidrográfica do Alto Paraíba, que juntamente com as sub-bacias do rio Taperoá e do Médio e Baixo Paraíba constituem a bacia hidrográfica do rio Paraíba, abrange uma área de 19.088,5 km², o que corresponde a 34% do território paraibano. Os 78 municípios inseridos nela abrigam uma população em torno de 1,8 milhão de habitantes, aproximadamente, 55% da população total do estado. Essas duas sub-bacias hidrográficas estão situadas em uma área de baixa pluviosidade, com médias anuais inferiores a 600 mm.&lt;/p&gt;

&lt;p&gt;Um estudo desenvolvido no início dos anos 2000 pela Companhia de Água e Esgotos da Paraíba (Cagepa) revelou que o volume hídrico acumulado no açude sofreu uma redução de 67,27% nos últimos 20 anos. Na época de sua construção, a capacidade de armazenamento do açude inicialmente era de 536 milhões de metros cúbicos, mas com o assoreamento essa capacidade foi reduzida para 436 milhões. A sua lâmina d’água abrange uma superfície em torno de 2.700 hectares. Nesse mesmo período, segundo dados da pesquisa, o número de ligações de água em prédios residenciais e comerciais em Campina Grande aumentou em 102,9%, as quais passaram de 40.298, em 1983, para 81.796, em 2003.&lt;/p&gt;

&lt;p&gt;O clima de toda a região da bacia é tropical quente e seco, com máxima de 37 °Celsius e mínimas de 16 °C. A precipitação média na região é de 600 mm/ano, caracterizando-se um clima de semi-árido.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Fonte: https://pt.wikipedia.org/wiki/Açude_Boqueirão
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Para mais informações sobre a atual crise hídrica, acesse essa visualização sobre o nosso açude:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://olhonagua.insa.gov.br/#!/?id=12172&amp;amp;reservatorio=epitacio_pessoa
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(nela pode ser visto também a situação de outros reservatorios.)&lt;/p&gt;

&lt;h1 id=&#34;bom-vamos-ao-que-interessa&#34;&gt;Bom vamos ao que interessa ?&lt;/h1&gt;

&lt;p&gt;Vamos lá, viemos aqui para ver algumas visualizações sobre o açude Epitacio Pessoa, então abaixo estará listado 3 visualizações de dados
usando gráficos tabulares e de todos os tipos, espero que aproveitem. &lt;em&gt;Lets Gooo!&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A primeira visualização será com gráfico de área, a ideia por trás dele, é mostrar os anos em que o açude esteve com sua capacidade oscilando entre 200 e 300 milhões de volume hídrico.&lt;/li&gt;
&lt;/ol&gt;

&lt;div id=&#34;vis&#34; width=300&gt;&lt;/div&gt;

&lt;script src=&#34;https://cdnjs.cloudflare.com/ajax/libs/vega/3.0.7/vega.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://cdnjs.cloudflare.com/ajax/libs/vega-lite/2.0.1/vega-lite.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://cdnjs.cloudflare.com/ajax/libs/vega-embed/3.0.0-rc7/vega-embed.js&#34;&gt;&lt;/script&gt;
&lt;script&gt;
    const spec = {
 &#34;$schema&#34;: &#34;https://vega.github.io/schema/vega-lite/v2.json&#34;,
     &#34;data&#34;: {
       &#34;url&#34;:&#34;https://api.insa.gov.br/reservatorios/12172/monitoramento&#34;,
       &#34;format&#34;: {
           &#34;type&#34;: &#34;json&#34;,
           &#34;property&#34;: &#34;volumes&#34;,
           &#34;parse&#34;: {
           &#34;DataInformacao&#34;: &#34;utc:&#39;%d/%m/%Y&#39;&#34;
               }
       }},
 &#34;vconcat&#34;: [{
    &#34;transform&#34;: [
    {&#34;filter&#34;: {&#34;field&#34;: &#34;Volume&#34;, &#34;range&#34;: [200, 300] }}
    ],
   &#34;width&#34;: 600,
   &#34;mark&#34;: &#34;area&#34;,
   &#34;encoding&#34;: {
     &#34;x&#34;: {
       &#34;field&#34;: &#34;DataInformacao&#34;,
       &#34;type&#34;: &#34;temporal&#34;,
       &#34;scale&#34;: {&#34;domain&#34;: {&#34;selection&#34;: &#34;brush&#34;}},
       &#34;axis&#34;: {&#34;title&#34;: &#34;&#34;}
     },
     &#34;y&#34;: {&#34;field&#34;: &#34;Volume&#34;,&#34;type&#34;: &#34;quantitative&#34;}
   }
 },{
    &#34;transform&#34;: [
    {&#34;filter&#34;: {&#34;field&#34;: &#34;Volume&#34;, &#34;range&#34;: [200, 300] }}
    ],
   &#34;width&#34;: 600,
   &#34;height&#34;: 80,
   &#34;mark&#34;: &#34;area&#34;,

   &#34;selection&#34;: {
     &#34;brush&#34;: {&#34;type&#34;: &#34;interval&#34;, &#34;encodings&#34;: [&#34;x&#34;]}
   },

   &#34;encoding&#34;: {
     &#34;x&#34;: {
       &#34;field&#34;: &#34;DataInformacao&#34;,
       &#34;type&#34;: &#34;temporal&#34;

     },
     &#34;y&#34;: {
       &#34;field&#34;: &#34;Volume&#34;,
       &#34;type&#34;: &#34;quantitative&#34;
     }
   }
 }]
};
    vegaEmbed(&#39;#vis&#39;, spec).catch(console.warn);
&lt;/script&gt;

&lt;p&gt;Podemos observar, ao aproximar em um trecho de ano expecifico os anos que oscilaram entre eses volumes de água, e que após de 2013 tivemos uma quebra brusca e ainda não voltamos para esse intervalo de 200-300 milhoes de volumes cúbicos.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
